#!/usr/bin/env bash
# ----------------------------------------------------------------------
# Numenta Platform for Intelligent Computing (NuPIC)
# Copyright (C) 2015, Numenta, Inc.  Unless you have an agreement
# with Numenta, Inc., for a separate license for this software code, the
# following terms and conditions apply:
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses.
#
# http://numenta.org/licenses/
# ----------------------------------------------------------------------

: ${NUPIC_CORE:?"You must set the NUPIC_CORE environment variable."}

clean_build=0
system=0
verbose=''
release_dir="${NUPIC_CORE}/build/release"

print_usage () {
  echo "Installs nupic.core from $NUPIC_CORE directory. By default, this"
  echo "installs into $NUPIC_CORE/build/release, but can be overridden with the"
  echo "-r or -s options (see below)."
  echo
  echo "Usage:"
  echo "> install_core [options]"
  echo
  echo "Options:"
  echo " -c clean build"
  echo " -v verbose console output"
  echo " -s build into system location (if specified, -r is ignored)"
  echo " -r <release-dir> outputs release to specified directory instead of"
  echo "    $NUPIC_CORE/build/release (default)"
  echo
  echo "Examples:"
  echo "An installation to default location at $NUPIC_CORE/build/release:"
  echo "> install_core"
  echo "A clean verbose installation to system location:"
  echo "> install_core -cvs"
  echo "A clean installation to specified location:"
  echo "> install_core -c -r /tmp"
}

# cmd line options processing
process_options () {
  while getopts "cvsr:" optname
    do
      case "$optname" in
        "c")
          clean_build=1
          ;;
        "v")
          verbose=1
          ;;
        "s")
          system=1
          ;;
        "r")
          release_dir=$OPTARG
          ;;
        "?")
          print_usage
          exit
          ;;
        ":")
          print_usage
          exit
          ;;
        *)
          # Should not occur
          print_usage
          exit
          ;;
      esac
    done
  return $OPTIND
}

process_options "$@"
argstart=$?

pushd "$NUPIC_CORE"

echo "Clearing out existing build directory.."
rm -rf build
mkdir -p build/scripts
pushd build/scripts

echo
echo "Calling CMake..."
if [ "${system}" -eq "1" ]; then
  echo "Installing into system location"
  VERBOSE="${verbose}" cmake ../../src
elif [ -n "$release_dir" ]; then
  echo "Installing into specified release directory \"${release_dir}\""
  VERBOSE="${verbose}" cmake ../../src -DCMAKE_INSTALL_PREFIX=${release_dir}
fi

# optionally start a fresh build
if [ "${clean_build}" -eq "1" ] ; then
  echo
  echo "Cleaning..."
  VERBOSE="${verbose}" make clean
fi

echo
echo "Making..."
VERBOSE="${verbose}" make -j6

echo
echo "Installing..."
VERBOSE="${verbose}" make install

popd
popd