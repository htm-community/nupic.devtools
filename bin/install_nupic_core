#!/usr/bin/env bash
# ----------------------------------------------------------------------
# Numenta Platform for Intelligent Computing (NuPIC)
# Copyright (C) 2015, Numenta, Inc.  Unless you have an agreement
# with Numenta, Inc., for a separate license for this software code, the
# following terms and conditions apply:
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# ----------------------------------------------------------------------

: ${NUPIC_CORE:?"You must set the NUPIC_CORE environment variable."}

clean_build=0
system=0
verbose=''
user_flag=''
release_dir="${NUPIC_CORE}/build/release"
platform=`uname`

print_usage () {
  echo "Installs nupic.core from $NUPIC_CORE directory. By default, this"
  echo "installs into $NUPIC_CORE/build/release, but can be overridden with the"
  echo "-r or -s options (see below)."
  echo
  echo "Usage:"
  echo "> install_nupic_core [options]"
  echo
  echo "Options:"
  echo " -c Clean build, removes old build artifacts and uninstalls existing "
  echo "    versions of Cap'n Proto."
  echo " -v Verbose console output."
  echo " -s build into system location (if specified, -r is ignored)"
  echo " -u Installs python requirements for nupic.bindings with the --user"
  echo "    option."
  echo " -r <release-dir> outputs release to specified directory instead of"
  echo "    ${release_dir} (default)"
  echo
  echo "Examples:"
  echo "An installation to default location at ${release_dir}:"
  echo "    > install_nupic_core"
  echo "A clean verbose installation to system location:"
  echo "    > install_nupic_core -cvs"
  echo "A clean installation to specified location (/tmp):"
  echo "    > install_nupic_core -c -r /tmp"
}

# cmd line options processing
process_options () {
  while getopts "cvsur:" optname
    do
      case "$optname" in
        "c")
          clean_build=1
          ;;
        "v")
          verbose=1
          ;;
        "s")
          system=1
          ;;
        "u")
          user_flag="--user"
          ;;
        "r")
          release_dir=$OPTARG
          ;;
        "?")
          print_usage
          exit
          ;;
        ":")
          print_usage
          exit
          ;;
        *)
          # Should not occur
          print_usage
          exit
          ;;
      esac
    done
  return $OPTIND
}

process_options "$@"
argstart=$?

pushd "$NUPIC_CORE"

if [ "${clean_build}" -eq "1" ] ; then
  # Uninstall any existing Cap'n Proto installations.
  if [ -d "capnproto-c++-0.5.2" ]; then
    pushd capnproto-c++-0.5.2
    echo
    echo "Uninstalling existing version of Cap'n Proto..."
    make uninstall
    popd
  fi
  git clean -dfx
  pip uninstall nupic.bindings -y
fi

# Any command that fails exits the script.
set -e

echo
echo "Clearing out existing build directory.."
rm -rf build
mkdir -p build/scripts
mkdir -p build/capnp

echo "Installing required python packages..."
pip install -r bindings/py/requirements.txt ${user_flag}

if [ -d "capnproto-c++-0.5.2" ]; then
  echo
  echo "Assuming Cap'n Proto has been installed."
  echo
else
  echo "Downloading Cap'n Proto..."
  curl -O https://capnproto.org/capnproto-c++-0.5.2.tar.gz
  tar zxf capnproto-c++-0.5.2.tar.gz

  pushd "$NUPIC_CORE/capnproto-c++-0.5.2"
  echo
  echo "Building Cap'n Proto..."

  if [[ "$platform" == 'Darwin' ]]; then
    # OS X
    ./configure --prefix="${NUPIC_CORE}/build/capnp"
  else
    # Linux
    CXXFLAGS="-fPIC -std=c++11 -m64 -fvisibility=hidden -Wall -Wreturn-type -Wunused -Wno-unused-parameter" ./configure --prefix="${NUPIC_CORE}/build/capnp"
  fi

  echo
  echo "Making Cap'n Proto..."
  make -j6
  echo
  echo "Installing Cap'n Proto"
  make install
  popd
fi

pushd build/scripts

echo
echo "Calling CMake..."
if [ "${system}" -eq "1" ]; then
  echo "Installing into system location"
  VERBOSE="${verbose}" cmake ../../src -DCMAKE_PREFIX_PATH="${NUPIC_CORE}/build/capnp"
elif [ -n "$release_dir" ]; then
  echo "Installing into specified release directory \"${release_dir}\""
  VERBOSE="${verbose}" cmake ../../src -DCMAKE_INSTALL_PREFIX=${release_dir} -DCMAKE_PREFIX_PATH="${NUPIC_CORE}/build/capnp"
fi

# optionally start a fresh build
if [ "${clean_build}" -eq "1" ] ; then
  echo
  echo "Cleaning..."
  VERBOSE="${verbose}" make clean
fi

echo
echo "Making..."
VERBOSE="${verbose}" make -j6

echo
echo "Installing..."
VERBOSE="${verbose}" make install

popd
popd
